#!/usr/bin/perl -w
# This processor works around POD limitations by supporting an include
# directive and variable substitution.
#
# generate-pod scans the pod<n> directories relative to the path of the
# generate-pod script itself for files ending in *.template. A file file is
# generated for .template file found.  The generated file is placed in the
# pod<n> directory in the current working directory.

require 5.00503;

use Getopt::Long;
use Cwd qw(getcwd);
use File::Basename qw(dirname basename);
use File::Spec::Functions qw(catfile);
use constant MAX_INCLUDE_LEVELS => 10;

my %variables = ();
GetOptions(
    "define|d=s" => \%variables,
) or die("Usage: $0 [--define <name>=<value> [--define <name>=<value> ..]]\n");

# Get the variable value by name or die with an error message.
sub fill {
    my ($name, $filename, $lineno) = @_;

    if (!exists($variables{$name})) {
        die "Undefined variable '$name' in '$filename' line $lineno\n";
    }
    return $variables{$name};
}

sub render {
    my ($input, $output, $out, $level) = @_;
    my $dir = dirname($input);
    my $lineno = 1;

    open(my $in, "< $input") or die "Cannot open $input: $!\n";
    if ($^O eq 'MSWin32' or $^O eq 'cygwin') {
        binmode $in, ':crlf';
    }
    while (my $line = readline($in)) {
        if ($line =~ /^=include\s+(\S+)/) {
            my $include = catfile($dir, $1);
            if ($level >= MAX_INCLUDE_LEVELS) {
                die "Too many nested includes: $input line $lineno\n";
            }
            render($include, $output, $out, $level + 1);
            next;
        }

        # Fill in placeholders in the form {{ name }}, where `name` is one or
        # more letters, digits, or underscore characters. `name` is case
        # sensitive.
        $line =~ s/\{\{\s*([a-zA-Z0-9_]+)\s*\}\}/fill($1, $input, $lineno)/ge;

        print $out $line or die "Cannot write to $output: $!\n";
        $lineno++;
    }
    close($in) or die "Cannot read from $input: $!\n";
}

sub main {
    my $srcdir = dirname(__FILE__);

    for my $section (qw(1 3 5 8)) {
        unless (-d "pod${section}") {
            mkdir("pod${section}", 0755) or
                die "Cannot create pod${section} directory: $!\n";
        }
        my $dir = catfile($srcdir, "pod${section}");
        opendir(D, $dir) or die "Cannot open $dir: $!\n";
        for my $file (readdir(D)) {
            if ($file =~ /\.template\z/) {
                my $input = catfile($srcdir, "pod${section}", $file);
                my $output = catfile("pod${section}", $file);
                $output =~ s/\.template\z//;
                open(my $out, "> $output") or die "Cannot open $output: $!\n";
                render($input, $output, $out, 0);
                close($out) or die "Cannot write to $output: $!\n";
            }
        }
    }
}

main();
